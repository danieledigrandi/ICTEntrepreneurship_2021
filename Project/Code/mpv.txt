How-to Setup Initial Version on Neo4j 
This guide is for Neo4j CLI setup
For Neo4j Desktop, you need to follow the import guide here:
https://neo4j.com/developer/desktop-csv-import/

------------
CORE DOMAIN KNOWLEDGE
------------

1. Initialise a new graph (name it via neo4j.conf, e.g toot-mvp)

2. Create constraint for RDF import w/
CREATE CONSTRAINT n10s_unique_uri ON (r:Resource) ASSERT r.uri IS UNIQUE

3. Install Neo4j neosemantics as a plugin
https://github.com/neo4j-labs/neosemantics

4. Init n10s config w/
CALL n10s.graphconfig.init

5. Import ontology w/
CALL n10s.onto.import.fetch(
    "https://raw.githubusercontent.com/ottomattas/INFOIE/main/Project/Code/toot-mvp.owl",
    "Turtle")

------------
CUSTOM DATA
------------
Companies
------
6. Create company listing CSV and place it to
/usr/local/Cellar/neo4j/4.2.4/libexec/import/

7. Import CSV with companies
LOAD CSV WITH HEADERS FROM "file:///companies.csv"  AS row
MERGE (comp:Company { companyName: row.companyName })
      ON CREATE SET comp.companyId = row.companyId,
                    comp.url = row.url
MERGE (typ:Type { companyType: row.companyType })
MERGE (comp)-[:HAS_TYPE]->(typ)

8. Link companies to the catalogue
MATCH
  (comp:Company),
  (cla: n4sch__Class{n4sch__name: 'Company'})
MERGE (comp)-[:LISTED_IN]->(cla)

------
Servers
------
9. Create server listing CSV and place it to
/usr/local/Cellar/neo4j/4.2.4/libexec/import/

10. Import CSV with servers
LOAD CSV WITH HEADERS FROM "file:///servers.csv"  AS row
MERGE (s:Server { serverName: row.serverName })
      ON CREATE SET s.companyId = row.companyId,
                    s.url = row.url
MERGE (env:Environment { serverEnvironment: row.serverEnvironment })
MERGE (s)-[:IN_ENVIRONMENT]->(env)

11. Link servers to the class
MATCH
  (s:Server),
  (cla: n4sch__Class {n4sch__name: 'ServerComputer'})
MERGE (s)-[:LISTED_IN]->(cla)

12. Link servers to companies
MATCH (s:Server)-->(), (c:Company)-->()
WHERE s.companyId = c.companyId
MERGE (s)-[:USED_BY]->(c)

13. Link environments to a class
MATCH
  (e:Environment),
  (c:n4sch__Class{n4sch__name: 'Environment'})
MERGE (e)-[:PART_OF]->(c)

14. Link types to a class
MATCH
  (t:Type),
  (c:n4sch__Class{n4sch__name: 'Type'})
MERGE (t)-[:PART_OF]->(c)

------
Servers
------
15. Create solution listing CSV and place it to
/usr/local/Cellar/neo4j/4.2.4/libexec/import/

16. Import CSV with solutions
LOAD CSV WITH HEADERS FROM "file:///solutions.csv"  AS row
MERGE (s:Solution { solutionName: row.solutionName })
      ON CREATE SET s.solutionId = row.solutionId,
                    s.url = row.url

17. Link solutions to a class
MATCH
  (s:Solution),
  (c:n4sch__Class{n4sch__name: 'Solution'})
MERGE (s)-[:PART_OF]->(c)

------
Engineers
------
18. Create solution listing CSV and place it to
/usr/local/Cellar/neo4j/4.2.4/libexec/import/

19. Import CSV with engineers
LOAD CSV WITH HEADERS FROM "file:///engineers.csv"  AS row
MERGE (e:Engineer { engineerName: row.engineerName })
      ON CREATE SET e.engineerId = row.engineerId,
                    e.url = row.url
MERGE (l:EngineerLevel { engineerLevel: row.engineerLevel })
MERGE (e)-[:HAS_LEVEL]->(l)

20. Link engineers to a class Person
MATCH
  (e:Engineer),
  (cla: n4sch__Class {n4sch__name: 'Person'})
MERGE (e)-[:IS_A]->(cla)

21. Link engineers to a class Engineer
MATCH
  (e:Engineer),
  (cla: n4sch__Class {n4sch__name: 'Engineer'})
MERGE (e)-[:IS_A]->(cla)


------------
SOME CYPHER
------------
* Company 1 allows only Solution 3 for Environment 3. What env is the server part of?
MATCH (:Environment { serverEnvironment: "Production"})<-[:IN_ENVIRONMENT]-(s:Server)-[:USED_BY]->(:Company { companyName: "Centralpoint"}),
      (sol:Solution { solutionId: "3"})
RETURN s as server, sol.solutionName as solution

* Company 2 allows Solution 1 and 2 for Environment 3.
MATCH (:Environment { serverEnvironment: "Production"})<-[:IN_ENVIRONMENT]-(s:Server)-[:USED_BY]->(:Company { companyName: "Centralpoint"}),
      (sol1:Solution { solutionId: "1"}),
      (sol2:Solution { solutionId: "2"})
RETURN s as server, sol1.solutionName as solution1, sol2.solutionName as solution2

* Company 3 allows Solution 3 for JUNIOR engineer.
MATCH (el:EngineerLevel { engineerLevel: "Junior"})<-[:HAS_LEVEL]-(e:Engineer),
      (sol:Solution { solutionId: "3"})
RETURN e.engineerName as engineer, sol.solutionName as solution

* Company 2 allows Solution 1 for JUNIOR engineer.
MATCH (el:EngineerLevel { engineerLevel: "Junior"})<-[:HAS_LEVEL]-(e:Engineer),
      (sol:Solution { solutionId: "1"})
RETURN e.engineerName as engineer, sol.solutionName as solution

* List companies that have servers in class Type A
MATCH (:Type { companyType: "A"})<-[:HAS_TYPE]-(c:Company)<-[:USED_BY]-(s:Server) 
RETURN c.companyId as companyId, c.companyName as companyName, s.serverName as serverName

------------
GENERIC CYPHER
------------
MATCH (n) RETURN n
MATCH (n) DETACH DELETE n
MATCH (s:Solution) DETACH DELETE s
MATCH (n) where ID(n)=95 return n
